<!DOCTYPE html>
<html>
<head>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/proxima-nova/1.0.0/proxima-nova.css" />
  <style>
    body {
      background-color: #1a1a1a;
      color: #14b8a6;
      font-family: 'Proxima Nova', sans-serif;
    }
    .game-container {
      max-width: 600px;
      margin: 20px auto;
      display: none;
    }
    .welcome-screen {
      max-width: 600px;
      margin: 100px auto;
      text-align: center;
    }
    .welcome-title {
      font-size: 36px;
      margin-bottom: 30px;
      color: #14b8a6;
    }
    .welcome-text {
      font-size: 18px;
      margin-bottom: 40px;
      line-height: 1.6;
      color: white;
    }
    .header {
      text-align: center;
      font-size: 32px;
      margin-bottom: 30px;
      color: #14b8a6;
    }
    .stats {
      display: flex;
      justify-content: space-between;
      font-size: 24px;
      margin-bottom: 20px;
      color: white;
    }
    .game-grid {
      display: grid;
      grid-template-columns: repeat(4, 1fr);
      gap: 10px;
    }
    .card {
      aspect-ratio: 1/1;
      background: rgba(20, 184, 166, 0.1);
      backdrop-filter: blur(10px);
      -webkit-backdrop-filter: blur(10px);
      border: 2px solid rgba(20, 184, 166, 0.2);
      color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 24px;
      cursor: pointer;
      transition: transform 0.3s;
      border-radius: 8px;
      box-shadow: 0 8px 32px 0 rgba(20, 184, 166, 0.1);
    }
    .card.flipped {
      transform: rotateY(180deg);
      background: rgba(20, 184, 166, 0.2);
    }
    .card.matched {
      visibility: hidden;
    }
    .number {
      display: none;
      color: white;
    }
    .card.flipped .number {
      display: block;
      transform: rotateY(180deg);
    }
    .game-over {
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background: rgba(26, 26, 26, 0.95);
      padding: 40px;
      border-radius: 16px;
      text-align: center;
      border: 2px solid rgba(20, 184, 166, 0.2);
      backdrop-filter: blur(10px);
      display: none;
      color: white;
    }
    .button {
      background: #14b8a6;
      color: white;
      border: none;
      padding: 12px 24px;
      border-radius: 8px;
      font-size: 18px;
      cursor: pointer;
      margin-top: 20px;
      font-family: 'Proxima Nova', sans-serif;
    }
    .button:hover {
      background: #0d9488;
    }
  </style>
</head>
<body>
  <div class="welcome-screen" id="welcomeScreen">
    <h1 class="welcome-title">Number Matching Game</h1>
    <p class="welcome-text">
      Match English numbers with their Mandarin Chinese counterparts.<br>
      You have 60 seconds to find all pairs!<br>
      Score points for matches, but be careful - wrong matches cost you points.
    </p>
    <button class="button" onclick="startGame()">Start Game</button>
  </div>

  <div class="game-container" id="gameContainer">
    <div class="header">Let's play matching numbers!</div>
    <div class="stats">
      <div class="score">Score: <span id="score">0</span></div>
      <div class="timer">Time: <span id="timer">60</span>s</div>
    </div>
    <div class="game-grid" id="gameGrid"></div>
  </div>

  <div class="game-over" id="gameOver">
    <h2>Game Over!</h2>
    <p>Final Score: <span id="finalScore">0</span></p>
    <button class="button" onclick="initializeGame()">Play Again</button>
  </div>

  <script>
    const chineseNumbers = {
      1: '一', 2: '二', 3: '三', 4: '四', 5: '五', 6: '六', 7: '七', 8: '八', 
      9: '九', 10: '十', 11: '十一', 12: '十二', 13: '十三', 14: '十四', 15: '十五'
    };

    let score = 0;
    let flippedCards = [];
    let matchedPairs = 0;
    let timeLeft = 60;
    let timerInterval;
    let gameActive = true;

    function startGame() {
      document.getElementById('welcomeScreen').style.display = 'none';
      document.getElementById('gameContainer').style.display = 'block';
      initializeGame();
    }

    function updateTimer() {
      timeLeft--;
      document.getElementById('timer').textContent = timeLeft;
      
      if (timeLeft <= 0) {
        endGame();
      }
    }

    function endGame() {
      gameActive = false;
      clearInterval(timerInterval);
      document.getElementById('finalScore').textContent = score;
      document.getElementById('gameOver').style.display = 'block';
    }

    function createCard(number, isChinese) {
      const card = document.createElement('div');
      card.className = 'card';
      const numberSpan = document.createElement('span');
      numberSpan.className = 'number';
      numberSpan.textContent = isChinese ? chineseNumbers[number] : number;
      card.dataset.number = number;
      card.dataset.type = isChinese ? 'chinese' : 'english';
      card.appendChild(numberSpan);
      
      card.addEventListener('click', () => handleCardClick(card));
      return card;
    }

    function handleCardClick(card) {
      if (!gameActive || flippedCards.length === 2 || 
          card.classList.contains('flipped') || 
          card.classList.contains('matched')) {
        return;
      }

      card.classList.add('flipped');
      flippedCards.push(card);

      if (flippedCards.length === 2) {
        checkMatch();
      }
    }

    function checkMatch() {
      const [card1, card2] = flippedCards;
      const match = card1.dataset.number === card2.dataset.number && 
                   card1.dataset.type !== card2.dataset.type;

      setTimeout(() => {
        if (match) {
          card1.classList.add('matched');
          card2.classList.add('matched');
          score += 10;
          matchedPairs++;
          if (matchedPairs === 8) {
            endGame();
          }
        } else {
          card1.classList.remove('flipped');
          card2.classList.remove('flipped');
          score = Math.max(0, score - 1);
        }
        
        document.getElementById('score').textContent = score;
        flippedCards = [];
      }, 1000);
    }

    function initializeGame() {
      const gameGrid = document.getElementById('gameGrid');
      gameGrid.innerHTML = '';
      score = 0;
      matchedPairs = 0;
      timeLeft = 60;
      gameActive = true;
      document.getElementById('timer').textContent = timeLeft;
      document.getElementById('score').textContent = score;
      document.getElementById('gameOver').style.display = 'none';
      flippedCards = [];
      clearInterval(timerInterval);
      timerInterval = setInterval(updateTimer, 1000);

      const numbers = Array(8).fill().map((_, i) => i + 1);
      const cards = [
        ...numbers.map(n => createCard(n, true)),
        ...numbers.map(n => createCard(n, false))
      ];

      for (let i = cards.length - 1; i > 0; i--) {
        const j = Math.floor(Math.random() * (i + 1));
        [cards[i], cards[j]] = [cards[j], cards[i]];
      }

      cards.forEach(card => gameGrid.appendChild(card));
    }
  </script>
</body>
</html>
